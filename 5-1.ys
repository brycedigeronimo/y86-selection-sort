# Execution begins at address 0 
    .pos 0
    irmovq stack, %rsp      # Set up stack pointer
    call main       # Execute main program
    halt            # Terminate program 
    
     
# Array of 10 elements
.pos 0x200
    .align 8
array:  
    .quad 0x10
    .quad 0x9
    .quad 0x8
    .quad 0x7
    .quad 0x6
    .quad 0x5
    .quad 0x4
    .quad 0x3
    .quad 0x2
    .quad 0x1


main:
    irmovq array, %rcx  #array in %rcx
    irmovq $10, %rdx    #size of array
    call sort       # sort(array, 10)
    ret
    
    
sort:  
     
loop1:
        rrmovq %rcx, %r9 #pointer in inner loop
        rrmovq %rcx, %rdi
        rrmovq %rdx, %r11 #r11 inner loop counter
        
        
loop2:  
        irmovq $8, %r10
        addq %r10, %r9
        mrmovq (%rdi), %r12 #r12 current min
        mrmovq (%r9), %r13
        subq %r12, %r13
        cmovl %r9, %rdi #update min pointer
        irmovq $1, %r14
        subq %r14, %r11 
        andq %r11, %r11
        jne loop2
        call swap
        #logic for outer loop
        addq %r10, %rcx
        subq %r14, %rdx
        andq %rdx, %rdx
        jne loop1
        ret
  
swap:   mrmovq (%rdi), %r12
        mrmovq (%rcx), %r13
        rmmovq %r13, (%rdi)
        rmmovq %r12, (%rcx)
        ret 
        
       
# Stack starts here and grows to lower addresses
    .pos 0x200
stack:
